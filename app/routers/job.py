import logging
from fastapi import APIRouter, Depends, HTTPException, Form
from sqlalchemy.orm import Session
from app.models.base import get_db
from app.crud.job import create_job, update_job, get_job_by_title, delete_job,get_job_by_id
from app.models.job import Job
from app.schemas.job import JobCreate, JobUpdate, JobOut

router = APIRouter()
logging.basicConfig(level=logging.INFO)


@router.post(
    "/create",
    response_model=JobOut,
    summary="–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
    description="""–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å hh.ru.  
    –ï—Å–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É.
    """,
    responses={
        201: {"description": "–í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"},
        400: {"description": "–í–∞–∫–∞–Ω—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}
    },
)
async def create_vacancy(
        title: str = Form(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"),
        status: str = Form(..., description="–°—Ç–∞—Ç—É—Å –≤–∞–∫–∞–Ω—Å–∏–∏"),
        company_name: str = Form(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"),
        company_address: str = Form(..., description="–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏"),
        logo_url: str = Form(..., description="–õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏"),
        description: str = Form(..., description="–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"),
        db: Session = Depends(get_db)
):
    """
    **–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏**
    - ‚ùå –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """

    logging.info(f"‚úÖ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é: {title}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤–∞–∫–∞–Ω—Å–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    if get_job_by_title(db, title):
        logging.warning(f"‚ùå –í–∞–∫–∞–Ω—Å–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {title} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        raise HTTPException(status_code=400, detail="Vacancy already exists")

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç JobCreate –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ create_job
    job_data = JobCreate(
        title=title,
        status=status,
        company_name=company_name,
        company_address=company_address,
        logo_url=logo_url,
        description=description
    )

    new_job = create_job(db, job_data)
    logging.info(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è {title} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")

    return new_job


@router.put(
    "/update/{job_id}",
    response_model=JobOut,
    summary="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
    description="–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É id",
)
async def update_vacancy(
    job_id: int,
    title: str = Form(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"),
    status: str = Form(..., description="–°—Ç–∞—Ç—É—Å –≤–∞–∫–∞–Ω—Å–∏–∏"),
    company_name: str = Form(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"),
    company_address: str = Form(..., description="–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏"),
    logo_url: str = Form(..., description="–õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏"),
    description: str = Form(..., description="–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"),
    db: Session = Depends(get_db)
):
    """
    **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏**
    - üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏.
    """

    logging.info(f"‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é —Å id: {job_id}")

    job = db.query(Job).filter(Job.id == job_id).first()
    if not job:
        logging.warning(f"‚ùå –í–∞–∫–∞–Ω—Å–∏—è —Å id {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        raise HTTPException(status_code=404, detail="Vacancy not found")

    job_data = JobUpdate(
        title=title,
        status=status,
        company_name=company_name,
        company_address=company_address,
        logo_url=logo_url,
        description=description
    )

    updated_job = update_job(db, job_id, job_data)
    logging.info(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —Å id {job_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    return updated_job


@router.get(
    "/get/{job_id}",
    response_model=JobOut,
    summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
    description="–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ id –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ë–î",
)
async def get_vacancy(
        job_id: int,
        db: Session = Depends(get_db)
):
    """
    **–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏**
    - üìÑ –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –µ—ë id.
    """

    logging.info(f"‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é —Å id: {job_id}")

    job = get_job_by_id(db, job_id)
    if not job:
        logging.warning(f"‚ùå –í–∞–∫–∞–Ω—Å–∏—è —Å id {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        raise HTTPException(status_code=404, detail="Vacancy not found")

    return job


@router.delete(
    "/delete/{job_id}",
    summary="–£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
    description="–£–¥–∞–ª—è–µ—Ç –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É id",
)
async def delete_vacancy(
        job_id: int,
        db: Session = Depends(get_db)
):
    """
    **–£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏**
    - ‚ùå –£–¥–∞–ª—è–µ—Ç –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ id.
    """

    logging.info(f"‚úÖ –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é —Å id: {job_id}")

    job = get_job_by_id(db, job_id)
    if not job:
        logging.warning(f"‚ùå –í–∞–∫–∞–Ω—Å–∏—è —Å id {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        raise HTTPException(status_code=404, detail="Vacancy not found")

    delete_job(db, job_id)
    logging.info(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —Å id {job_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")

    return {"message": "Vacancy successfully deleted"}


