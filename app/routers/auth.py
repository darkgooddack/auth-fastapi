import logging
from fastapi import APIRouter, Depends, HTTPException
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from app.models.base import get_db
from app.models.user import User
from app.core.security import verify_password, create_access_token
from app.crud.user import get_user_by_username
from app.schemas.user import UserCreate

router = APIRouter()
logging.basicConfig(level=logging.INFO)


@router.post(
    "/token",
    summary="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    description="""
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞—ë—Ç JWT-—Ç–æ–∫–µ–Ω.  
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â—ë–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º.
    """,
    responses={
        200: {"description": "–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ç–æ–∫–µ–Ω"},
        400: {"description": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å"}
    },
)
async def login(user: UserCreate, db: Session = Depends(get_db)):
    """
    **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
    - üîë –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.
    - üé´ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT-—Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â—ë–Ω–Ω—ã–º API.
    - ‚ùå –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–µ.
    """

    logging.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")

    db_user = get_user_by_username(db, user.username)

    if not db_user:
        logging.error("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        raise HTTPException(status_code=400, detail="Invalid username or password")

    if not verify_password(user.password, db_user.hashed_password):
        logging.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        raise HTTPException(status_code=400, detail="Invalid username or password")

    access_token = create_access_token(data={"sub": db_user.username})
    logging.info(f"‚úÖ –í—ã–¥–∞–Ω —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {db_user.username}")

    return {"access_token": access_token, "token_type": "bearer"}

